name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install build dependencies
        run: |
          uv pip install --system build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          if [ -f CHANGELOG.md ]; then
            # Extract changelog section for this version
            awk "/^## \[$VERSION\]/,/^## \[/{if(/^## \[/ && !/^## \[$VERSION\]/)exit;print}" CHANGELOG.md > release_notes.md
          else
            echo "Release $VERSION" > release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          files: dist/*
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}

      - name: Publish to PyPI
        if: ${{ !contains(steps.get_version.outputs.VERSION, '-') }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          if [ -n "$TWINE_PASSWORD" ]; then
            twine upload dist/*
          else
            echo "PyPI token not configured, skipping upload"
          fi
        continue-on-error: true
